<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>
<!-- status="OFF"，可以去掉，它的含义为是否记录log4j2本身的event信息，默认是OFF -->
<configuration status="OFF">
    <!-- 定义下面的引用名 -->
    <Properties>
        <property name="log_pattern">%d{yyyy-MM-dd HH:mm:ss} %-5level %class %line 行 %method - %msg%xEx%n</property>
        <property name="log-path">/logs/youyou</property><!-- ${web:rootDir}是项目根目录 -->
        <property name="every_file_size">5M</property><!-- 日志切割的最小单位 -->
        <property name="output_log_level">debug</property><!-- 日志输出级别 -->
    </Properties>
    <!--先定义所有的appender -->
    <appenders>
        <!--这个输出控制台的配置 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--这个都知道是输出日志的格式 -->
            <PatternLayout pattern="${log_pattern}"/>
        </Console>
        <!-- debug级别日志文件 -->
        <!--每次大小超过size，则这size大小的日志会自动进行压缩，作为存档 -->
        <RollingFile name="app_debug" fileName="${log-path}/debug/debug.log"
                     filePattern="${log-path}/debug/debug-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <ThresholdFilter level="info" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="${log_pattern}"/>
            <SizeBasedTriggeringPolicy size="${every_file_size}"/>
        </RollingFile>
        <!-- info级别日志文件 -->
        <RollingFile name="app_info" fileName="${log-path}/info/info.log"
                     filePattern="${log-path}/info/info-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${log_pattern}"/>
            <SizeBasedTriggeringPolicy size="${every_file_size}"/>
        </RollingFile>
        <!-- error级别日志文件 -->
        <RollingFile name="app_error" fileName="${log-path}/error/error.log"
                     filePattern="${log-path}/error/error-%d{yyyy-MM-dd}-%i.log.gz">
            <Filters>
                <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout pattern="${log_pattern}"/>
            <SizeBasedTriggeringPolicy size="${every_file_size}"/>
        </RollingFile>
    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
    <loggers>

        <!--由于 console 上已经定义了 log 日志是 trace，内容过于繁杂，所有可以再设置下面的日志-->

        <!-- 设置 显示 hibernate 生成的 hql 语句(debug 显示，info 就不显示)-->
        <logger name="org.hibernate.hql" level="info" additivity="false"></logger>
        <!-- 要显示 hibernate 的 sql 语句的参数， 必须 trace -->
        <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="trace"></logger>

        <!--关闭个人组件的 log-->
        <logger name="pers.roamer.boracay" level="debug"></logger>

        <!-- 设置springframe的log -->
        <logger name="org.springframework" level="error" additivity="false"></logger>
        <!-- 设置 druid 的 log-->
        <logger name="com.alibaba.druid" level="error" additivity="false"></logger>

        <!--建立一个默认的root的logger，需要在root的level中指定输出的级别， -->
        <root level="${output_log_level}">
            <appender-ref ref="Console"/>
            <appender-ref ref="app_debug"/>
            <appender-ref ref="app_info"/>
            <appender-ref ref="app_error"/>
        </root>
    </loggers>
</configuration>
